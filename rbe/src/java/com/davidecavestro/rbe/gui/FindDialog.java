/*
 * FindDIalog.java
 *
 * Created on 30 dicembre 2005, 0.41
 */

package com.davidecavestro.rbe.gui;

import com.davidecavestro.common.util.action.ActionNotifier;
import com.davidecavestro.common.util.action.ActionNotifierImpl;
import com.davidecavestro.rbe.actions.FindNextAction;
import com.davidecavestro.rbe.gui.search.Matcher;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.text.JTextComponent;

/**
 *
 * @author  davide
 */
public class FindDialog extends javax.swing.JDialog {

	private final FindNextAction _findNextAction;
	
    private java.beans.PropertyChangeSupport changeSupport;
	
	/** Costruttore. */
	public FindDialog (java.awt.Frame parent, boolean modal, FindNextAction findNextAction){
		super (parent, modal);
		this._findNextAction = findNextAction;
		initComponents ();
		closeButton.getInputMap (JComponent.WHEN_IN_FOCUSED_WINDOW).put (KeyStroke.getKeyStroke ("ESCAPE"), "cancel");
		closeButton.getActionMap().put("cancel", new javax.swing.AbstractAction ("cancel"){
			public void actionPerformed (ActionEvent ae){
				close();
			}
		});
		changeSupport = new java.beans.PropertyChangeSupport (this);
		
		final Component comboEditor = patternComboBox.getEditor ().getEditorComponent ();
		comboEditor.addKeyListener (new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				patternComboBoxKeyTyped(evt);
			}
        });
		
		this.getRootPane ().setDefaultButton (okButton);
		
		pack ();
		setLocationRelativeTo (null);
		
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        patternComboBox = new javax.swing.JComboBox();
        okButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        matchCaseCheckBox = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        highlightCheckBox = new javax.swing.JCheckBox();
        backwardCheckBox = new javax.swing.JCheckBox();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle(java.util.ResourceBundle.getBundle("com.davidecavestro.rbe.gui.res").getString("Find"));
        setFont(new java.awt.Font("ActionIs", 0, 10));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        patternComboBox.setEditable(true);
        patternComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        patternComboBox.setMinimumSize(new java.awt.Dimension(80, 24));
        patternComboBox.setPreferredSize(new java.awt.Dimension(200, 24));
        patternComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                patternComboBoxItemStateChanged(evt);
            }
        });
        patternComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patternComboBoxActionPerformed(evt);
            }
        });
        patternComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                patternComboBoxPropertyChange(evt);
            }
        });
        patternComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                patternComboBoxKeyTyped(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 8, 5, 8);
        getContentPane().add(patternComboBox, gridBagConstraints);

        okButton.setAction(_findNextAction);
        okButton.setFont(new java.awt.Font("Dialog", 0, 12));
        org.openide.awt.Mnemonics.setLocalizedText(okButton, java.util.ResourceBundle.getBundle("com.davidecavestro.rbe.gui.res").getString("&Find"));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 8, 5, 8);
        getContentPane().add(okButton, gridBagConstraints);

        closeButton.setFont(new java.awt.Font("Dialog", 0, 12));
        org.openide.awt.Mnemonics.setLocalizedText(closeButton, java.util.ResourceBundle.getBundle("com.davidecavestro.rbe.gui.res").getString("&Close"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 8, 5, 8);
        getContentPane().add(closeButton, gridBagConstraints);

        jButton3.setFont(new java.awt.Font("Dialog", 0, 12));
        org.openide.awt.Mnemonics.setLocalizedText(jButton3, java.util.ResourceBundle.getBundle("com.davidecavestro.rbe.gui.res").getString("&Help"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 8, 5, 8);
        getContentPane().add(jButton3, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel1.setLabelFor(patternComboBox);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, java.util.ResourceBundle.getBundle("com.davidecavestro.rbe.gui.res").getString("&Find_text:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 8, 5, 8);
        getContentPane().add(jLabel1, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        matchCaseCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        org.openide.awt.Mnemonics.setLocalizedText(matchCaseCheckBox, java.util.ResourceBundle.getBundle("com.davidecavestro.rbe.gui.res").getString("&Match_case"));
        matchCaseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchCaseCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel1.add(matchCaseCheckBox, gridBagConstraints);

        jCheckBox2.setFont(new java.awt.Font("Dialog", 0, 12));
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox2, java.util.ResourceBundle.getBundle("com.davidecavestro.rbe.gui.res").getString("&Match_Whole_words_only"));
        jCheckBox2.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel1.add(jCheckBox2, gridBagConstraints);

        highlightCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        highlightCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(highlightCheckBox, java.util.ResourceBundle.getBundle("com.davidecavestro.rbe.gui.res").getString("&Highlight"));
        highlightCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel1.add(highlightCheckBox, gridBagConstraints);

        backwardCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        org.openide.awt.Mnemonics.setLocalizedText(backwardCheckBox, java.util.ResourceBundle.getBundle("com.davidecavestro.rbe.gui.res").getString("&Backward"));
        backwardCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backwardCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel1.add(backwardCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void matchCaseCheckBoxActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchCaseCheckBoxActionPerformed
		matchCaseChanged ();
	}//GEN-LAST:event_matchCaseCheckBoxActionPerformed

	private void patternComboBoxItemStateChanged (java.awt.event.ItemEvent evt) {//GEN-FIRST:event_patternComboBoxItemStateChanged
		patternChanged ();
	}//GEN-LAST:event_patternComboBoxItemStateChanged

	private void backwardCheckBoxActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backwardCheckBoxActionPerformed
		backwardChanged ();
	}//GEN-LAST:event_backwardCheckBoxActionPerformed

	private void patternComboBoxPropertyChange (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_patternComboBoxPropertyChange
		// TODO add your handling code here:
	}//GEN-LAST:event_patternComboBoxPropertyChange

	private void patternComboBoxKeyTyped (java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patternComboBoxKeyTyped
		patternChanged ();
	}//GEN-LAST:event_patternComboBoxKeyTyped

	private void highlightCheckBoxActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightCheckBoxActionPerformed
		highlightChanged ();
	}//GEN-LAST:event_highlightCheckBoxActionPerformed

	private void patternComboBoxActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patternComboBoxActionPerformed
		patternChanged ();

		for (int i = 0; i< patternComboBox.getModel ().getSize (); i++){
			final Object o = patternComboBox.getModel ().getElementAt (i);
			if (o!=null && o.equals (patternComboBox.getModel ().getSelectedItem ())){
				/* elemento gia' presente in lista*/
				return;
			}
		}
		patternComboBox.insertItemAt (patternComboBox.getModel ().getSelectedItem (), 0);

	}//GEN-LAST:event_patternComboBoxActionPerformed

	private void okButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
		close ();
	}//GEN-LAST:event_okButtonActionPerformed

	private void closeButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
		close ();
	}//GEN-LAST:event_closeButtonActionPerformed
	
	
	private void exitForm (java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
		
	}//GEN-LAST:event_exitForm
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox backwardCheckBox;
    private javax.swing.JButton closeButton;
    private javax.swing.JCheckBox highlightCheckBox;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox matchCaseCheckBox;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox patternComboBox;
    // End of variables declaration//GEN-END:variables
	
	private void close (){
		this.hide ();
	}
	
	private String oldPattern = "";
	private void patternChanged (){
		String newValue = (String)this.patternComboBox.getModel ().getSelectedItem ();
		if (newValue == null || newValue.length ()==0){
			final Component c = this.patternComboBox.getEditor ().getEditorComponent ();
			if (c instanceof JTextField) {
				newValue = (String)((JTextField)c).getText ();
			}
		}
		this.changeSupport.firePropertyChange ("pattern", oldPattern, newValue);
		oldPattern = newValue;
	}
	
	/**
	 * Variabile interna, inizializzata allo stesso valore della checkbox
	 */
	private boolean oldHighlight = true;
	private void highlightChanged (){
		System.out.println ("Sending Highlight changed event");
		boolean newHighlight = this.highlightCheckBox.getModel ().isSelected ();
		this.changeSupport.firePropertyChange ("highlight", oldHighlight, newHighlight);
		oldHighlight = newHighlight;
	}

	private boolean oldBackward;
	private void backwardChanged (){
		boolean newBackward = this.backwardCheckBox.getModel ().isSelected ();
		this.changeSupport.firePropertyChange ("backward", oldBackward, newBackward);
		oldBackward = newBackward;
	}

	private boolean oldMatchCase;
	private void matchCaseChanged (){
		boolean newMatchCase = this.matchCaseCheckBox.getModel ().isSelected ();
		this.changeSupport.firePropertyChange ("matchcase", oldMatchCase, newMatchCase);
		oldMatchCase = newMatchCase;
	}

//	private boolean oldCaseSensitive = false;
//	private void caseSensitiveChanged (){
//		System.out.println ("Sending Highlight changed event");
//		boolean newCaseSensitive = this.matchCaseCheckBox.getModel ().isSelected ();
//		this.changeSupport.firePropertyChange ("matchcase", oldCaseSensitive, newCaseSensitive);
//		oldCaseSensitive = newCaseSensitive;
//	}

	public synchronized void addPropertyChangeListener (
	PropertyChangeListener listener) {
		if (listener == null) {
			return;
		}
		changeSupport.addPropertyChangeListener (listener);
	}
	

	public synchronized void removePropertyChangeListener (
	PropertyChangeListener listener) {
		if (listener == null || changeSupport == null) {
			return;
		}
		changeSupport.removePropertyChangeListener (listener);
	}
	
	public void show (){
		final Component c = this.patternComboBox.getEditor ().getEditorComponent ();
		if (c instanceof JTextField) {
			((JTextField)c).selectAll ();
		}
		super.show ();
	}

}
