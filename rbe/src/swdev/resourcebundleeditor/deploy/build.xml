<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="all" name="urbe">
	<!-- Written to assume that classpath is rooted in the current directory. -->
	<!-- So this should be OK if you make this script in the root of a filesystem. -->
	<!-- If not, just change src.dir to be the root of your sources' package tree -->
	<!-- and use e.g. View over a Filesystem to mount that subdirectory with all capabilities. -->
	<!-- The idea is that both Ant and NetBeans have to know what the package root is -->
	<!-- for the classes in your application. -->

	<!-- Don't worry if you don't know the Ant syntax completely or need help on some tasks! -->
	<!-- The standard Ant documentation can be downloaded from AutoUpdate and -->
	<!-- and then you can access the Ant manual in the online help. -->

  <taskdef name="obfuscate" 
        classname="com.yworks.yguard.ObfuscatorTask" 
	      classpath="yguard.jar"/>
	      
	<!-- Inizilizza le risorse interne. -->
	<target name="init">
		<tstamp/>
		<tstamp prefix="file.ts">
			<format property="TODAY" pattern="yyyyMMdd" />
		</tstamp>	
		
		<!-- carica le impostazioni esterne. -->
		<loadproperties srcFile="build.properties"/>
		
		<property name="project.name" value="${ant.project.name}"/>
		<property name="version" value="0.1"/>

		<property location="work" name="work.dir"/>
		<property location="lib" name="lib.dir"/>
		<property location="../../common/src/java" name="common.src.dir"/>
		<property location="../src" name="src.base.dir"/>
		<property location="${src.base.dir}/java" name="src.dir"/>
		<property location="bin" name="bin.dir"/>
		<property location="license" name="license.dir"/>
		<property location="icons" name="icons.dir"/>
		<property location="${work.dir}/classes" name="classes.dir"/>
		<property location="${work.dir}/doc/api" name="javadoc.dir"/>
		<property location="${work.dir}/tmp" name="tmp.dir"/>
		<property location="${work.dir}/log" name="log.dir"/>

<!--
		<property name="app.dir.name" value="${project.name}-${file.ts.TODAY}" />
-->
		<property name="app.dir.name" value="${project.name}" />
		<property location="${app.dir.name}" name="app.dir"/>
		<property location="${app.dir}/lib" name="app.lib.dir"/>
		<property location="${app.dir}/res" name="app.res.dir"/>
		<property location="${app.dir}/bin" name="app.bin.dir"/>
		<property location="${app.dir}/license" name="app.license.dir"/>
		<property location="${app.dir}/icons" name="app.icons.dir"/>

		<property location="${app.dir}/${project.name}.jar" name="app.jar"/>
		<property location="${app.res.dir}/i18n.jar" name="i18n.jar"/>
		<property location="${app.res.dir}/images.jar" name="images.jar"/>
		<property location="${app.res.dir}/help.jar" name="help.jar"/>

		<property location="/usr/local/java/bin/java" name="ext.jvm"/>
		<property location="/usr/local/java/bin/javac" name="ext.javac"/>

		<property location="${project.name}.tar" name="app.tar" />
		<property location="${project.name}.tar.gz" name="app.zip" />

		<property location="${src.dir}/com/davidecavestro/rbe/release.properties" name="release.properties" />
		<property name="_compileWithDebugSymbols" value="on" />
	</target>

	<!-- Compila il codice sorgente. -->
	<target depends="init" name="compile">
		<!-- Prepara le directory di utilitÃ . -->
		<mkdir dir="${work.dir}"/>
		<mkdir dir="${classes.dir}"/>
		<mkdir dir="${tmp.dir}"/>
		<mkdir dir="${log.dir}"/>


		<condition property="_compileWithDebugSymbols" >
			<and>
				<istrue value="${compileWithDebugSymbols}"/>
			</and>
		</condition>
		<!-- Compila il codice sorgente. -->
		<javac 
		    debug="${_compileWithDebugSymbols}" 
		    deprecation="false" 
		    destdir="${classes.dir}" 
		    srcdir="${src.dir}:${common.src.dir}" 
		    fork="true" 
		    executable="${ext.javac}" 
		    includesfile="javacincludes.txt" 
		    excludesfile="javacexcludes.txt">
		    
			<classpath>
			<fileset dir="${lib.dir}">
			    <include name="**/*.jar"/>
			</fileset>
			</classpath>
		</javac>
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
			    <include name="com/davidecavestro/rbe/gui/res*.properties"/>
			    <include name="com/davidecavestro/rbe/release.properties"/>
			</fileset>
		</copy>
		<copy todir="${classes.dir}/com/davidecavestro/rbe/gui/">
			<fileset dir="${license.dir}"/>
			<mapper type="flatten"/>
		</copy>
		
	</target>

	<!-- Genera l'archivio contenente il core dell'applicazione. -->
	<target depends="init,compile" name="jar">
		<mkdir dir="${app.dir}"/>
		
		<!-- prepara le informazioni di release. -->
		<buildnumber/>
		<propertyfile
			file="${release.properties}"
			comment="Release properties">
			<entry  key="build.number" value="${build.number}"/>
			<entry  key="build.date" type="date" value="now" pattern="yyyy-MM-dd HH:mm:ss.SSS"/>
		</propertyfile>		
		
		<jar basedir="${classes.dir}" compress="true" jarfile="${app.jar}" >
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Main-Class" value="com.davidecavestro.rbe.Launcher"/>
				<attribute name="Class-Path" value=". lib/jhall.jar res/i18n.jar lib/AbsoluteLayout.jar lib/swingx.jar lib/jlfgr-1_0.jar lib/org-openide-awt.jar lib/org-openide-util.jar res/images.jar res/help.jar "/>
				<attribute name="Implementation-Title" value="${project.name}"/>
				<attribute name="Implementation-Version" value="${version} ${TODAY}"/> 
				<attribute name="Implementation-Vendor" value="Davide Cavestro"/>
			</manifest>
		</jar>
		<condition property="_obfuscationDenied" >
			<and>
				<istrue value="${obfuscationDenied}"/>
			</and>
		</condition>
		<antcall target="obfuscate"/>
	</target>

	<!-- Genera la directory di distribuzione standard. -->
	<target depends="bundle" description="Build everything." name="all"/>

	<!-- Genera la documentazione javadoc di supporto al progetto. -->
	<target depends="init" description="Javadoc for ${project.name} API." name="javadoc">
		<mkdir dir="${javadoc.dir}"/>
		<javadoc destdir="${javadoc.dir}" packagenames="*">
			<sourcepath>
				<pathelement location="${src.dir}"/>
			</sourcepath>
		</javadoc>
	</target>

	<target depends="jar" name="deploy" description="Prepara la directory di installazione dell'applicazione." >
		
		<mkdir dir="${app.lib.dir}"/>
		<mkdir dir="${app.res.dir}"/>

		<!-- copia i file di libreria -->
		<copy toDir="${app.lib.dir}">
			<fileset dir="${lib.dir}"/>
		</copy>
		<!-- copia i file di lancio -->
		<copy toDir="${app.bin.dir}">
			<fileset dir="${bin.dir}"/>
		</copy>
		<!-- copia i file delle licenze -->
		<copy toDir="${app.license.dir}">
			<fileset dir="${license.dir}"/>
		</copy>
		<!-- copia le icone -->
		<copy toDir="${app.icons.dir}">
			<fileset dir="${icons.dir}"/>
		</copy>
		<!-- rende i file di lancio leggibili ed eseguibili da tutti gli utenti -->
		<chmod dir="${app.bin.dir}" perm="ugo+rx" includes="**/*.sh"/>

		<!-- Prepara l'archivio contenente le risorse grafiche. -->
		<jar compress="false" jarfile="${images.jar}" >
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Implementation-Title" value="${project.name}" />
				<attribute name="Implementation-Version" value="${version} ${TODAY}" /> 
				<attribute name="Implementation-Vendor" value="DaveSoft ltd." />
			</manifest>
			<fileset dir="${src.dir}" includes="com/davidecavestro/rbe/gui/images/**" />
		</jar>
		<!-- Prepara l'archivio contenente le risorse dell'help. -->
		<jar compress="true" jarfile="${help.jar}" >
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Implementation-Title" value="${project.name}"/>
				<attribute name="Implementation-Version" value="${version} ${TODAY}"/> 
				<attribute name="Implementation-Vendor" value="DaveSoft ltd."/>
			</manifest>
			<fileset dir="${src.base.dir}" includes="help/**" />
		</jar>

		<!-- Invoca la rimozione dei file temporanei. -->
		<antcall target="clean.work"/>
	</target>

	<!-- Genera il file compresso pronto per essere distribuito. -->
	<target depends="sign" description="Create application bundle." name="bundle">
		<tar tarfile="${app.tar}" >
			<tarfileset dir="." preserveLeadingSlashes="true">
			<include name="${app.dir.name}/**"/>
				<exclude name="${app.dir.name}/bin/launch.sh"/>
				<exclude name="**/cvs/**"/>
				<exclude name="**/CVS/**"/>
				<exclude name="**/.nbattrs"/>
    			</tarfileset>
			<tarfileset dir="." mode="755" preserveLeadingSlashes="true">
			<include name="${app.dir.name}/bin/launch.sh"/>
			</tarfileset>
		</tar>
		<gzip zipfile="${app.zip}" src="${app.tar}"/>
		<delete file="${app.tar}"/>
		<!-- Invoca la rimozione deila directory di distribuzione. -->
		<antcall target="clean.app"/>
	</target>

	<!-- Ripulisce l'ambiente di lavoro. -->
	<target depends="clean.work,clean.app,clean.zip" description="Clean all build products." name="clean">
		<echo>Rimozione di tutte le risorse generate.</echo>
	</target>

	<!-- Elimina i file tmmporanei di supporto. -->    
	<target depends="init" description="Clean temporary build products." name="clean.work">
		<echo>Rimozione directory temporanea di lavoro.</echo>
		<delete dir="${javadoc.dir}"/>
		<delete dir="${work.dir}"/>
	</target>

	<!-- Elimina la directory distribuibile. -->
	<target depends="init" description="Clean application resources." name="clean.app">
		<echo>Rimozione directory di distribuzione.</echo>
		<delete dir="${app.dir}"/>
	</target>

	<!-- Elimina il file distribuibile.-->
	<target depends="init" description="Clean application bundle." name="clean.zip">
		<echo>Rimozione file di distribuzione.</echo>
		<delete file="${app.tar}"/>
		<delete file="${app.zip}"/>
	</target>

	<!-- Verifica abilitazione della firma dei jar. -->
	<target name="jarSignEnabledTest">
		<condition property="_jarSignEnabled">
			<and>
				<isset property="signjar.enabled" />
				<istrue value="${signjar.enabled}"/>
			</and>
		</condition>
		<echo message="Esito controllo abilitazione della firma dei JAR: ${_jarSignEnabled}" />
	</target>
	
	<target name="inputJarSignPassword" unless="_isKeystorePasswordSet">
		<input
			message="Please enter keystore password to sign generated archives: "
			addproperty="signjar.keystore.password"
		/>
	</target>
	
	<!-- 
	Verifica che le condizioni necessarie 
	al processo di firma dei jar siano soddisfatte. 
	-->
	<target depends="inputJarSignPassword" name="canSignJarTest" if="_jarSignEnabled" >
		
		<!-- Controllo impostazione alias certificato. -->
		<condition property="_isKeystoreAliasSet" >
			<isset property="signjar.keystore.alias" />
		</condition>
		<echo message="Esito controllo validitÃ  alias del certificato: ${_isKeystoreAliasSet}"/>
		
		<!-- Controllo impostazione password certificato. -->
		<condition property="_isKeystorePasswordSet" >
			<isset property="signjar.keystore.password" />
		</condition>
		
		<antcall target="inputJarSignPassword"/>
		
		<!-- RIpete controllo impostazione password certificato dopo immissione. -->
		<condition property="_isKeystorePasswordSet" >
			<isset property="signjar.keystore.password" />
		</condition>
		
		<echo message="Esito controllo validitÃ  password del certificato: ${_isKeystoreAliasSet}"/>
		
		<condition property="_canSignJars" >
			<and>
				<istrue value="${_jarSignEnabled}"/>
				<istrue value="${_isKeystoreAliasSet}"/>
				<istrue value="${_isKeystorePasswordSet}"/>
			</and>
		</condition>
		
		<echo message="Verifica delle condizioni necessarie per la firma dei JAR: ${_canSignJars}" />
	</target>
	
	<!-- Firma i jar generati. -->
	<target depends="deploy,jarSignEnabledTest,canSignJarTest" name="sign" if="_jarSignEnabled">
		<echo>Firma dei JAR.</echo>
		<fail unless="_canSignJars" message="Impossibile firmare i jar." />
		
		<antcall target="generatekey"/>
		
		<echo message="Signing jars with alias ${signjar.keystore.alias} and password ${signjar.keystore.password}" />
		<signjar alias="${signjar.keystore.alias}" storepass="${signjar.keystore.password}" >
			<fileset file="${app.jar}"/>
			<fileset dir="${app.res.dir}">
				<include name="**/*.jar"/>
			</fileset>
		</signjar>
	</target>

	<!-- Controlla se la generazione del certificato Ã¨ abilitata. -->
	<target name="generatekeyEnabledTest">
		<echo>Controllo abilitazione della generazione del certificato.</echo>
		<!-- Verifica abilitazione della generazione del certificato per la firma dei jar. -->
		<condition property="_keyGenerationEnabled">
			<and>
				<isset property="genkey.enabled" />
				<istrue value="${genkey.enabled}"/>
			</and>
		</condition>
		<echo message="Esito controllo abilitazione generazione certificato: ${_keyGenerationEnabled} "/>
	</target>
		
	<!-- Controlla se Ã¨ possibile generare il certificato. -->
	<target name="canGeneratekeyTest" if="_keyGenerationEnabled">
		<!-- Controllo impostazione alias del certificato. -->
		<condition property="_isGenkeyAliasSet" >
			<isset property="genkey.alias" />
		</condition>
		<echo message="Esito controllo impostazione alias del certificato: ${_isGenkeyAliasSet} "/>
		
		<input
			message="Please enter password for the new certificate: "
			addproperty="genkey.password"
		/>		
		
		<!-- Controllo password del certificato. -->
		<condition property="_isGenkeyPasswordSet" >
			<isset property="genkey.password" />
		</condition>
		<echo message="Esito controllo password del certificato: ${_isGenkeyPasswordSet}"/>
					
		<!-- Controlla se sono verificate le condizioni NECESSARIE per la generazione del certificato. -->
		<condition property="_canGenerateKey">	
			<and>
				<istrue value="${_isGenkeyAliasSet}" />
				<istrue value="${_isGenkeyPasswordSet}" />
			</and>
		</condition>
		<echo message="Esito controllo condizioni per la generazione del certificato: ${_canGenerateKey}"/>
	</target>

	<!-- Genera il certificato per la firma. -->
	<target depends="generatekeyEnabledTest,canGeneratekeyTest" name="generatekey" if="_keyGenerationEnabled">
		<echo message="Generazione del certificato digitale." />
		<fail unless="_canGenerateKey" message="Impossibile generare il certificato." />
		<echo message="Generazione certificato con alias: ${genkey.alias} e password ${genkey.password}"/>
		<genkey alias="${genkey.alias}" storepass="${genkey.password}" >
			<dname>
				<param name="CN" value="${genkey.dname.cn}"/>
				<param name="OU" value="${genkey.dname.ou}"/>
				<param name="O"  value="${genkey.dname.o}"/>
				<param name="L"  value="${genkey.dname.l}"/>
				<param name="S"  value="${genkey.dname.s}"/>
				<param name="C"  value="${genkey.dname.C}"/>
			</dname>
		</genkey>	
	</target>
	
	
	
	<!-- Offusca i jar generati. -->
	<target name="obfuscate" unless="_obfuscationDenied">
		<obfuscate mainclass="com.davidecavestro.rbe.Launcher" logfile="log.xml"
		replaceclassnamestrings="true">
		<inoutpair in="${app.jar}" out="${app.jar}"/>
		<expose>
		    <class classes="private" methods="private" fields="private">
			<patternset>
			    <include name="**.*"/>
			</patternset>
		    </class>
		</expose>
		<adjust replaceContent="true">
		<!-- plain-text class names in the config files will -->
		<!-- be replaced with the obfuscated name versions   -->
		<include name="**/*.config"/>
		<include name="com/davidecavestro/rbe/release.properties"/>
		</adjust>
		<adjust replacePath="false">
		<!-- keep the complete path to the resources, (gifs...) even if -->
		<!-- package com.mycompany.myapp gets obfuscated by name        -->
		<include name="com/davidecavestro/rbe/gui/image/*"/>
		</adjust>
		<adjust replaceName="true">
		<!-- Replace the .properties files' names with the obfuscated  -->
		<!-- versions if the corresponding .class files get obfuscated -->
		<include name="**/*.properties"/>
		</adjust>
		</obfuscate>	
	</target>
</project>
